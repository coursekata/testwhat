% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/state.R
\name{state}
\alias{state}
\alias{State}
\alias{RootState}
\alias{ChildState}
\title{testwhat states.}
\description{
Root State has no parent state.
ChildState does have state.
Both inherit from the prototypical State class
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-State-set}{\code{State$set()}}
\item \href{#method-State-verify_root}{\code{State$verify_root()}}
\item \href{#method-State-assert_is}{\code{State$assert_is()}}
\item \href{#method-State-assert_is_not}{\code{State$assert_is_not()}}
\item \href{#method-State-clone}{\code{State$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-State-set"></a>}}
\if{latex}{\out{\hypertarget{method-State-set}{}}}
\subsection{Method \code{set()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{State$set(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-State-verify_root"></a>}}
\if{latex}{\out{\hypertarget{method-State-verify_root}{}}}
\subsection{Method \code{verify_root()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{State$verify_root(fun = deparse(sys.call(-1)[[1]]))}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-State-assert_is"></a>}}
\if{latex}{\out{\hypertarget{method-State-assert_is}{}}}
\subsection{Method \code{assert_is()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{State$assert_is(cls, parent, fun = deparse(sys.call(-1)[[1]]))}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-State-assert_is_not"></a>}}
\if{latex}{\out{\hypertarget{method-State-assert_is_not}{}}}
\subsection{Method \code{assert_is_not()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{State$assert_is_not(cls, parent, fun = deparse(sys.call(-1)[[1]]))}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-State-clone"></a>}}
\if{latex}{\out{\hypertarget{method-State-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{State$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
\section{Super class}{
\code{\link[testwhat:State]{testwhat::State}} -> \code{RootState}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-RootState-new}{\code{RootState$new()}}
\item \href{#method-RootState-get}{\code{RootState$get()}}
\item \href{#method-RootState-verify_root}{\code{RootState$verify_root()}}
\item \href{#method-RootState-clone}{\code{RootState$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="testwhat" data-topic="State" data-id="assert_is"><a href='../../testwhat/html/State.html#method-State-assert_is'><code>testwhat::State$assert_is()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testwhat" data-topic="State" data-id="assert_is_not"><a href='../../testwhat/html/State.html#method-State-assert_is_not'><code>testwhat::State$assert_is_not()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testwhat" data-topic="State" data-id="set"><a href='../../testwhat/html/State.html#method-State-set'><code>testwhat::State$set()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RootState-new"></a>}}
\if{latex}{\out{\hypertarget{method-RootState-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RootState$new(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RootState-get"></a>}}
\if{latex}{\out{\hypertarget{method-RootState-get}{}}}
\subsection{Method \code{get()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RootState$get(name)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RootState-verify_root"></a>}}
\if{latex}{\out{\hypertarget{method-RootState-verify_root}{}}}
\subsection{Method \code{verify_root()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RootState$verify_root(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RootState-clone"></a>}}
\if{latex}{\out{\hypertarget{method-RootState-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RootState$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
\section{Super class}{
\code{\link[testwhat:State]{testwhat::State}} -> \code{ChildState}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ChildState-new}{\code{ChildState$new()}}
\item \href{#method-ChildState-get}{\code{ChildState$get()}}
\item \href{#method-ChildState-add_details}{\code{ChildState$add_details()}}
\item \href{#method-ChildState-set_details}{\code{ChildState$set_details()}}
\item \href{#method-ChildState-clone}{\code{ChildState$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="testwhat" data-topic="State" data-id="assert_is"><a href='../../testwhat/html/State.html#method-State-assert_is'><code>testwhat::State$assert_is()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testwhat" data-topic="State" data-id="assert_is_not"><a href='../../testwhat/html/State.html#method-State-assert_is_not'><code>testwhat::State$assert_is_not()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testwhat" data-topic="State" data-id="set"><a href='../../testwhat/html/State.html#method-State-set'><code>testwhat::State$set()</code></a></span></li>
<li><span class="pkg-link" data-pkg="testwhat" data-topic="State" data-id="verify_root"><a href='../../testwhat/html/State.html#method-State-verify_root'><code>testwhat::State$verify_root()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChildState-new"></a>}}
\if{latex}{\out{\hypertarget{method-ChildState-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChildState$new(state)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChildState-get"></a>}}
\if{latex}{\out{\hypertarget{method-ChildState-get}{}}}
\subsection{Method \code{get()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChildState$get(name)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChildState-add_details"></a>}}
\if{latex}{\out{\hypertarget{method-ChildState-add_details}{}}}
\subsection{Method \code{add_details()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChildState$add_details(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChildState-set_details"></a>}}
\if{latex}{\out{\hypertarget{method-ChildState-set_details}{}}}
\subsection{Method \code{set_details()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChildState$set_details(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChildState-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ChildState-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChildState$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
