% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check-expr.R
\name{check_expr}
\alias{check_expr}
\alias{check_result.ExprState}
\alias{check_output.ExprState}
\alias{check_error.ExprState}
\alias{check_equal.ExprResultState}
\alias{check_equal.ExprOutputState}
\alias{check_equal.ExprErrorState}
\title{Check the result, output or errors thrown by an expression}
\usage{
check_expr(state, expr)

\method{check_result}{ExprState}(state, error_msg = NULL, append = TRUE, ...)

\method{check_output}{ExprState}(state, error_msg = NULL, append = TRUE, ...)

\method{check_error}{ExprState}(state, no_error_msg = NULL, append = TRUE, ...)

\method{check_equal}{ExprResultState}(
  state,
  eq_condition = "equivalent",
  eq_fun = NULL,
  incorrect_msg = NULL,
  append = TRUE,
  ...
)

\method{check_equal}{ExprOutputState}(state, eq_fun = NULL, incorrect_msg = NULL, append = TRUE, ...)

\method{check_equal}{ExprErrorState}(state, eq_fun = NULL, incorrect_msg = NULL, append = TRUE, ...)
}
\arguments{
\item{state}{state to start from (only for \code{check_} functions)}

\item{expr}{the expression to run}

\item{error_msg}{custom message in case the expression throws an error while
it shouldn't}

\item{append}{Whether or not to append the feedback to feedback built in
previous states}

\item{...}{S3 stuff}

\item{no_error_msg}{custom message in case the expression doesn't throw an
error while it should}

\item{eq_condition}{character string indicating how to compare. See
\code{\link{is_equal}}.}

\item{eq_fun}{optional argument to specify a custom equality function. The
function should take two arguments and always return a single boolean
value: \code{TRUE} or \code{FALSE}.}

\item{incorrect_msg}{custom message in case the result, output or error of
the expression does not correspond with the solution}
}
\description{
Run an expression in student and solution environment and compare the result,
output or error that is thrown by it.
}
\examples{
\dontrun{
# Example 1
a <- c(1, 2, 3, 4, 5, 6)

# SCT
ex() \%>\% check_expr("a[c(2, 4)]") \%>\% check_result() \%>\% check_equal()

# Example 2
my_fun <- function() { print('hello') }

# SCT
ex() \%>\% check_expr("my_fun()") \%>\% check_output() \%>\% check_equal()
}
}
